Code i used to formate the date files, and testing Java I/O -> txt 


// This is what i use to formate txt files from data from web
	public void connectToFilesOnDisk()
	{
		String currentDir = file.getAbsolutePath();
		//System.out.println(currentDir + pathToDatabase + databaseFile);
		
		String line = null;
		
		String[] temp1 = new String[50];
		String[] temp2 = new String[50];
		String[] temp3 = new String[50];
		int index = 0;
		try {
			fileReader = new FileReader(currentDir + pathToDatabase + "fold/namesF.txt");
			reader = new BufferedReader(fileReader);
			
			while((line = reader.readLine()) != null) {
				  System.out.println(line);
				  temp1[index++] = line;
			}   
			System.out.println("DISLIKES.........");
			index = 0;
			fileReader = new FileReader(currentDir + pathToDatabase + "fold/datesF.txt");
			reader = new BufferedReader(fileReader);
			while((line = reader.readLine()) != null) {
				  System.out.println(line);
				  temp2[index++] = line;
			}   
			index = 0;
			fileReader = new FileReader(currentDir + pathToDatabase + "newFile.txt");
			reader = new BufferedReader(fileReader);
			while((line = reader.readLine()) != null) {
				  System.out.println(line);
				  temp3[index++] = line;
			}   
			
			
			fileWriter = new FileWriter(currentDir + pathToDatabase + "newFile1.txt");
			writer = new BufferedWriter(fileWriter);
			
			for(int i = 0; i < temp1.length; i++) {
				writer.write(temp1[i] + "," + temp3[i] + "," + temp2[i]);
				writer.newLine();
			}
			
			
			writer.close();
			reader.close();
			
//			//fileWriter = new FileWriter(currentDir + pathToDatabase + "final.txt");
//			
//			BufferedReader bufferedReader = new BufferedReader(fileReader);
//			while((line = bufferedReader.readLine()) != null) {
//			  //System.out.println(line);
//			  temp1[index] = line;
//			  index++;
//			}   
//			
//			index = 0;
//			fileReader = new FileReader(currentDir + pathToDatabase + "output.txt");
//			 bufferedReader = new BufferedReader(fileReader);
//			while((line = bufferedReader.readLine()) != null) {
//			  //System.out.println(line);
//			  temp2[index] = line;
//			  index++;
//			}   
//
//			BufferedWriter br = new BufferedWriter(fileWriter);
//			
//			for(int i = 0; i < temp1.length; i++) {
//				System.out.println(temp1[i] + "," + temp2[i]);
//				br.write(temp1[i] + "," + temp2[i]);
//				br.newLine();			
//				}
//			br.flush();
//			br.close();
			
			// Always close files.
			//bufferedReader.close();   
			 } catch (IOException e) { e.printStackTrace(); }

	}



////// Playing around 
//	     		if((char)c == '/') {
//		fileWriter.write(',');
//		continue;
//	}
//	fileWriter.write(c);

//fileWriter = new FileWriter(currentDir + pathToDatabase + "output.txt");
//System.out.println( "Printing.......");
//int c;
//String temp1 = "";
//String temp2 = "";
//while ((c = fileReader.read()) != -1) {
//	System.out.print( (char) c);
//
// }
//c = 0; 
//fileReader = new FileReader(currentDir + pathToDatabase + "output.txt");
//while ((c = fileReader.read()) != -1) {
//	System.out.print( (char) c);
//
//
// }

//    	 	fileReader.close();
//    	 	//fileWriter.close();





//// Always wrap FileReader in BufferedReader.
//BufferedReader bufferedReader = new BufferedReader(fileReader);
//
//while((line = bufferedReader.readLine()) != null) {
//  System.out.println(line);
//  
//}   
//// Always close files.
//bufferedReader.close();   
//	 	
		/*This could be good 
		 * File classpathRoot = new File(classLoader.getResource("").getPath());
			File[] csvFiles = classpathRoot.listFiles(new FilenameFilter() {
			    @Override public boolean accept(File dir, String name) {
			        return name.endsWith(".csv");
			    }
			}); */